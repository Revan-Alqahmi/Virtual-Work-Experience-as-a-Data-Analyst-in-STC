# -*- coding: utf-8 -*-
"""stc TV_T1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11nqKkKTFa020Av5DOZQakn9szfhxX_GD

# STC Jawwy
"""

"""
Here we install libraries that are not installed by default
Example:  pyslsb
Feel free to add any library you are planning to use.
"""
!pip install pyxlsb

# Import the required libraries
"""
Please feel free to import any required libraries as per your needs
"""
import pandas as pd     # provides high-performance, easy to use structures and data analysis tools
import pyxlsb           # Excel extention to read xlsb files (the input file)
import numpy as np      # provides fast mathematical computation on arrays and matrices

"""# Jawwy dataset
The dataset consists of meta details about the movies and tv shows as genre.
Also details about Users activities, spent duration and if watching in High definition or standard definition.
You have to analyse this dataset to find top insights, findings and to solve the four tasks assigned to you.
"""

dataframe = pd.read_csv("/content/stc TV Data Set_T1.csv") #i convert it to CSV because xlsb extinction gave me an error
# Please make a copy of dataset if you are going to work directly and make changes on the dataset

df=dataframe.copy()

df.head() #to display the first 5 rows

# check the data shape
dataframe.shape

# display the first 5 rows
dataframe.head()

# Data Preprocessing on the input data
dataframe = dataframe.drop(columns=['Column1'])         # dropping the index column
dataframe['program_name'] = dataframe['program_name'].str.strip()  # trim spaces in movies names to avoid misspellings in input data
dataframe['date_'] = pd.to_datetime(dataframe['date_']) # read date column as date data type "i changed this line becuse the previous one gave me error"
dataframe[['duration_seconds', 'season','episode','series_title','hd']] = dataframe[['duration_seconds', 'season','episode','series_title','hd']].apply(pd.to_numeric)  # read numeric columns as numeric data types
dataframe[['user_id_maped', 'program_name','program_class','program_desc','program_genre','original_name']] = dataframe[['user_id_maped', 'program_name','program_class','program_desc','program_genre','original_name']].astype(str) # read string columns as string data types

# display the dataset after applying data types
dataframe.head()

# describe the numeric values in the dataset
dataframe.describe()

# check if any column has null value in the dataset
dataframe.isnull().any()

"""# Task 1
##### You are required to work on task one to study and HD flag for available dataset
"""

# make a copy of the dataframe for working on task 1
df=dataframe.copy()

# Task One: Study the 'HD' flag in the dataset

# Check unique values and their frequencies in the 'HD' column
hd_flag_counts = dataframe['hd'].value_counts()

# Display the unique values and their frequencies
print("Unique values and their frequencies in the 'HD' column:")
print(hd_flag_counts)

# Plot a bar chart to visualize the distribution of 'HD' flag
import matplotlib.pyplot as plt

# Set plot style
plt.style.use('ggplot')

# Plot the bar chart
hd_flag_counts.plot(kind='bar', color='skyblue')
plt.title("Distribution of 'HD' Flag")
plt.xlabel("HD Flag")
plt.ylabel("Frequency")
plt.xticks(rotation=0)
plt.show()

# Here we try to get the most watched movies (Total Views / Total Users Views / Total watch time)
# For series we concatenated the Session episode to differentiate between episodes
grouped=df.copy()
grouped.loc[grouped['program_class'] == 'SERIES/EPISODES', 'program_name'] = grouped['program_name']+'_SE'+grouped['season'].astype(str)+'_EP'+grouped['episode'].astype(str)
grouped = grouped.groupby(['program_name','program_class'])\
.agg({'user_id_maped': [('co1', 'nunique'),('co2', 'count')],\
      'duration_seconds': [('co3', 'sum')] }).reset_index()
grouped.columns = ['program_name','program_class','No of Users who Watched', 'No of watches', 'Total watch time in seconds']
grouped['Total watch time in houres']=grouped['Total watch time in seconds']/3600
grouped = grouped.drop(columns=['Total watch time in seconds'])
grouped = grouped.sort_values(by=['Total watch time in houres', 'No of watches','No of Users who Watched'], ascending=False).reset_index(drop=True)

# show the result
grouped.head(35)

# we import Visualization libraries
# you can ignore and use any other graphing libraries
import matplotlib.pyplot as plt # a comprehensive library for creating static, animated, and interactive visualizations
import plotly #a graphing library makes interactive, publication-quality graphs. Examples of how to make line plots, scatter plots, area charts, bar charts, error bars, box plots, histograms, heatmaps, subplots, multiple-axes, polar charts, and bubble charts.
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# plot top 10 Programs
fig = px.pie(grouped.head(10), values='Total watch time in houres', names='program_name',\
             hover_data=['program_class'],title='top 10 programs in total watch time in houres')
fig.show()

# Here we try to study the customer experience against Program class
grouped=df.copy()
grouped = grouped.groupby('program_class')\
.agg({'user_id_maped': [('co1', 'nunique'),('co2', 'count')],\
      'duration_seconds': [('co3', 'sum')] }).reset_index()
grouped.columns = ['program_class','No of Users who Watched', 'No of watches', 'Total watch time in seconds']
grouped['Total watch time in houres']=grouped['Total watch time in seconds']/3600
grouped = grouped.drop(columns=['Total watch time in seconds'])
grouped = grouped.sort_values(by=['Total watch time in houres', 'No of watches','No of Users who Watched'], ascending=False).reset_index(drop=True)

# show the result
grouped.head()

# plot the total watch time against total number of users and report your findings
fig = px.pie(grouped, values='Total watch time in houres', names='program_class',\
             hover_data=['program_class'],title='Total duration spent by program_class')
fig2 = px.pie(grouped, values='No of Users who Watched', names='program_class',\
             hover_data=['program_class'],title='Total Users watching by program_class')

fig.update_traces(sort=False)
fig2.update_traces(sort=False)
fig.show()
fig2.show()

"""
TODO study the relation and user's behaviour Against HD flag, feel free to include any comparison
"""
'''
To study the relationship and user behavior against the HD flag,
we can analyze various aspects such as the total watch time, number of users watching HD vs.
non-HD content, and user engagement metrics.
'''

# Grouping the data based on the HD flag
hd_grouped = df.groupby('hd').agg({
    'user_id_maped': [('unique_users', 'nunique')],
    'duration_seconds': [('total_watch_time', 'sum'), ('average_watch_time', 'mean')],
    'program_class': [('total_programs', 'count')]
}).reset_index()

hd_grouped.columns = ['HD Flag', 'Unique Users', 'Total Watch Time (seconds)', 'Average Watch Time (seconds)', 'Total Programs']

# Converting total watch time to hours for better readability
hd_grouped['Total Watch Time (hours)'] = hd_grouped['Total Watch Time (seconds)'] / 3600

# Plotting the data
fig, axes = plt.subplots(2, 2, figsize=(15, 10))

# Plot total watch time
axes[0, 0].bar(hd_grouped['HD Flag'], hd_grouped['Total Watch Time (hours)'])
axes[0, 0].set_title('Total Watch Time by HD Flag')
axes[0, 0].set_xlabel('HD Flag')
axes[0, 0].set_ylabel('Total Watch Time (hours)')

# Plot average watch time
axes[0, 1].bar(hd_grouped['HD Flag'], hd_grouped['Average Watch Time (seconds)'])
axes[0, 1].set_title('Average Watch Time by HD Flag')
axes[0, 1].set_xlabel('HD Flag')
axes[0, 1].set_ylabel('Average Watch Time (seconds)')

# Plot total number of unique users
axes[1, 0].bar(hd_grouped['HD Flag'], hd_grouped['Unique Users'])
axes[1, 0].set_title('Unique Users by HD Flag')
axes[1, 0].set_xlabel('HD Flag')
axes[1, 0].set_ylabel('Number of Unique Users')

# Plot total number of programs
axes[1, 1].bar(hd_grouped['HD Flag'], hd_grouped['Total Programs'])
axes[1, 1].set_title('Total Programs by HD Flag')
axes[1, 1].set_xlabel('HD Flag')
axes[1, 1].set_ylabel('Total Programs')

plt.tight_layout()
plt.show()

'''
This code will generate four bar plots showing the relationship between user behavior and the HD flag. The plots include total watch time,
average watch time, number of unique users, and total programs watched, with each plot separated by HD and non-HD content.
'''